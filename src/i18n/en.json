{
    "see_step_by_step": "Step by step:",

    "home_button_dark_mode": "Dark Mode",
    "dark_mode_title": "Dark Mode",
    "dark_mode_text_explain_concept": "Dark Mode is a dark theme option for interfaces, reducing screen brightness, improving readability in low-light environments, and decreasing eye strain. It also gives the app a modern look.",
    "dark_mode_text_explain_create": "To apply Dark Mode with styled-components, we create two themes (light and dark) and switch between them using the ThemeProvider. Colors are accessed directly in the components via theme props.\n Dark mode can be manually activated (with a button), and the state can be saved in localStorage for persistence between sessions.",
    "dark_mode_step_1": "1. Define light and dark themes",
    "dark_mode_step_2": "2. Create GlobalStyle with styled-components",
    "dark_mode_step_3": "3. Wrap your app with ThemeProvider",
    "dark_mode_step_4": "4. Control the theme with useState and localStorage",
    "dark_mode_step_5": "5. Create the theme switch button",

    "home_button_translate": "Internationalization (i18n)",
    "translation_title": "Internationalization (i18n)",
    "translation_text_explain_concept": "Internationalization (or i18n) is the process of preparing an application to support multiple languages, allowing the content to be dynamically translated according to the user's preference.",
    "translation_text_explain_create": "To apply internationalization with react-i18next, we create separate translation files for each language and configure i18n to register these resources. Interface texts are accessed through keys with the t() function, which returns the translation according to the current language. Language switching can be done manually (with a button or selector), and the user's choice can be saved in localStorage for persistence between sessions.",
    "translation_step_1": "1. Install dependencies",
    "translation_step_2": "2. Create translation files",
    "translation_step_3": "3. Configure i18n",
    "translation_step_4": "4. Import i18n at the start of the app",
    "translation_step_5": "5. Use the useTranslation hook",
    "translation_step_6": "6. Change the language dynamically",

    "home_button_sentry": "Sentry",
    "sentry_title": "Sentry",
    "sentry_text_explain_concept": "Sentry is a real-time error monitoring tool that helps identify failures in the application quickly and efficiently. It logs error details such as where they occurred and what caused them, helping developers fix issues faster.",
    "sentry_text_explain_create": "To implement Sentry in a React application, install the @sentry/react and @sentry/tracing libraries, and configure monitoring in the entry point of the app using the Sentry.init() function. The DSN provided by the Sentry dashboard connects the app to the monitoring project. You can also wrap components with ErrorBoundary to capture UI errors. This way, failures are automatically logged, allowing detailed analysis and quicker fixes.",
    "sentry_step_1": "1. Create an account and start a project at https://sentry.io",
    "sentry_step_2": "2. Install the dependency",
    "sentry_step_3": "3. Initialize Sentry (right at the start of the app, like in index.js)",
    "sentry_step_4": "4. Test by forcing an error (anywhere in the code)",
    "sentry_step_5": "5. Screenshot of the Sentry dashboard",

    "home_button_snippets": "Snippets \n(react-syntax-highlighter)",
    "snippets_title": "Snippets \n(react-syntax-highlighter)",
    "snippets_text_explain_concept": "react-syntax-highlighter is a library that allows you to display code snippets with syntax highlighting directly in React apps. It supports several languages and visual themes, making code easier to read and understand. It's ideal for documentation, education, or sharing snippets in an organized and styled way.",
    "snippets_text_explain_create": "To implement react-syntax-highlighter, simply install the library and import the desired component with the theme and highlight language. The code is passed as content inside the component, and the look is customized based on the chosen theme. You can also apply custom styles or change the theme dynamically, according to the app's interface.",
    "snippets_step_1": "1. Install the library",
    "snippets_step_2": "2. Import the component and theme",
    "snippets_step_3": "3. Display the code",
    "snippets_step_4": "4. Additional options (optional)",

    "home_button_fields_examples": "List of Components",
    "fields_examples_title": "List of Components",

    "home_button_status_code": "HTTP Status Codes",
    "status_code_title": "HTTP Status Codes",
    "status_code_subtitle": "Quick reference of the main HTTP response codes",

    "status_code_1xx": "‚ñ∂Ô∏è 1xx - Informational",
    "status_code_title_100": "100 Continue",
    "status_code_text_100": "The server received the beginning of the request, continue sending the rest.",
    "status_code_title_101": "101 Switching Protocols",
    "status_code_text_101": "The server accepted the protocol switch.",

    "status_code_2xx": "‚úÖ 2xx - Success",
    "status_code_title_200": "200 OK",
    "status_code_text_200": "Successful request.",
    "status_code_title_201": "201 Created",
    "status_code_text_201": "Resource successfully created.",
    "status_code_title_204": "204 No Content",
    "status_code_text_204": "Successful request, but no response body content.",

    "status_code_3xx": "üîÄ 3xx - Redirection",
    "status_code_title_301": "301 Moved Permanently",
    "status_code_text_301": "Resource permanently moved.",
    "status_code_title_302": "302 Found",
    "status_code_text_302": "Temporary redirect.",
    "status_code_title_304": "304 Not Modified",
    "status_code_text_304": "Resource has not been modified since the last request.",

    "status_code_4xx": "‚ö†Ô∏è 4xx - Client Errors",
    "status_code_title_400": "400 Bad Request",
    "status_code_text_400": "The request is malformed.",
    "status_code_title_401": "401 Unauthorized",
    "status_code_text_401": "Authentication required.",
    "status_code_title_403": "403 Forbidden",
    "status_code_text_403": "Authenticated but not authorized.",
    "status_code_title_404": "404 Not Found",
    "status_code_text_404": "Resource not found.",
    "status_code_title_429": "429 Too Many Requests",
    "status_code_text_429": "Request limit exceeded.",

    "status_code_5xx": "‚ùå 5xx - Server Errors",
    "status_code_title_500": "500 Internal Server Error",
    "status_code_text_500": "Unexpected server error.",
    "status_code_title_502": "502 Bad Gateway",
    "status_code_text_502": "Gateway/proxy received an invalid response.",
    "status_code_title_503": "503 Service Unavailable",
    "status_code_text_503": "Server temporarily unavailable.",

    "home_button_ant_design": "Ant Design"
}
